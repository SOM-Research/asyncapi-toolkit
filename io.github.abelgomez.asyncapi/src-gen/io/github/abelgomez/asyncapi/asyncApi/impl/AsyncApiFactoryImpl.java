/**
 * generated by Xtext 2.17.0
 */
package io.github.abelgomez.asyncapi.asyncApi.impl;

import io.github.abelgomez.asyncapi.asyncApi.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AsyncApiFactoryImpl extends EFactoryImpl implements AsyncApiFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static AsyncApiFactory init()
  {
    try
    {
      AsyncApiFactory theAsyncApiFactory = (AsyncApiFactory)EPackage.Registry.INSTANCE.getEFactory(AsyncApiPackage.eNS_URI);
      if (theAsyncApiFactory != null)
      {
        return theAsyncApiFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new AsyncApiFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AsyncApiFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case AsyncApiPackage.ASYNC_API: return createAsyncAPI();
      case AsyncApiPackage.ABSTRACT_INFO: return createAbstractInfo();
      case AsyncApiPackage.INFO: return createInfo();
      case AsyncApiPackage.ABSTRACT_CONTACT: return createAbstractContact();
      case AsyncApiPackage.CONTACT: return createContact();
      case AsyncApiPackage.ABSTRACT_LICENSE: return createAbstractLicense();
      case AsyncApiPackage.LICENSE: return createLicense();
      case AsyncApiPackage.ABSTRACT_SERVER: return createAbstractServer();
      case AsyncApiPackage.SERVER: return createServer();
      case AsyncApiPackage.ABSTRACT_VARIABLE: return createAbstractVariable();
      case AsyncApiPackage.VARIABLE: return createVariable();
      case AsyncApiPackage.ABSTRACT_TOPIC: return createAbstractTopic();
      case AsyncApiPackage.TOPIC: return createTopic();
      case AsyncApiPackage.ABSTRACT_MESSAGE: return createAbstractMessage();
      case AsyncApiPackage.MESSAGE: return createMessage();
      case AsyncApiPackage.ABSTRACT_SCHEMA: return createAbstractSchema();
      case AsyncApiPackage.SCHEMA: return createSchema();
      case AsyncApiPackage.ABSTRACT_COMPONENT: return createAbstractComponent();
      case AsyncApiPackage.COMPONENT: return createComponent();
      case AsyncApiPackage.REFERENCE: return createReference();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case AsyncApiPackage.VERSION_NUMBER:
        return createVersionNumberFromString(eDataType, initialValue);
      case AsyncApiPackage.SCHEME:
        return createSchemeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case AsyncApiPackage.VERSION_NUMBER:
        return convertVersionNumberToString(eDataType, instanceValue);
      case AsyncApiPackage.SCHEME:
        return convertSchemeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AsyncAPI createAsyncAPI()
  {
    AsyncAPIImpl asyncAPI = new AsyncAPIImpl();
    return asyncAPI;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractInfo createAbstractInfo()
  {
    AbstractInfoImpl abstractInfo = new AbstractInfoImpl();
    return abstractInfo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Info createInfo()
  {
    InfoImpl info = new InfoImpl();
    return info;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractContact createAbstractContact()
  {
    AbstractContactImpl abstractContact = new AbstractContactImpl();
    return abstractContact;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Contact createContact()
  {
    ContactImpl contact = new ContactImpl();
    return contact;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractLicense createAbstractLicense()
  {
    AbstractLicenseImpl abstractLicense = new AbstractLicenseImpl();
    return abstractLicense;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public License createLicense()
  {
    LicenseImpl license = new LicenseImpl();
    return license;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractServer createAbstractServer()
  {
    AbstractServerImpl abstractServer = new AbstractServerImpl();
    return abstractServer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Server createServer()
  {
    ServerImpl server = new ServerImpl();
    return server;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractVariable createAbstractVariable()
  {
    AbstractVariableImpl abstractVariable = new AbstractVariableImpl();
    return abstractVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractTopic createAbstractTopic()
  {
    AbstractTopicImpl abstractTopic = new AbstractTopicImpl();
    return abstractTopic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Topic createTopic()
  {
    TopicImpl topic = new TopicImpl();
    return topic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractMessage createAbstractMessage()
  {
    AbstractMessageImpl abstractMessage = new AbstractMessageImpl();
    return abstractMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Message createMessage()
  {
    MessageImpl message = new MessageImpl();
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractSchema createAbstractSchema()
  {
    AbstractSchemaImpl abstractSchema = new AbstractSchemaImpl();
    return abstractSchema;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Schema createSchema()
  {
    SchemaImpl schema = new SchemaImpl();
    return schema;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractComponent createAbstractComponent()
  {
    AbstractComponentImpl abstractComponent = new AbstractComponentImpl();
    return abstractComponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Component createComponent()
  {
    ComponentImpl component = new ComponentImpl();
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Reference createReference()
  {
    ReferenceImpl reference = new ReferenceImpl();
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VersionNumber createVersionNumberFromString(EDataType eDataType, String initialValue)
  {
    VersionNumber result = VersionNumber.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertVersionNumberToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Scheme createSchemeFromString(EDataType eDataType, String initialValue)
  {
    Scheme result = Scheme.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSchemeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AsyncApiPackage getAsyncApiPackage()
  {
    return (AsyncApiPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static AsyncApiPackage getPackage()
  {
    return AsyncApiPackage.eINSTANCE;
  }

} //AsyncApiFactoryImpl
