/**
 * generated by Xtext 2.17.0
 */
package io.github.abelgomez.asyncapi.asyncApi.impl;

import io.github.abelgomez.asyncapi.asyncApi.AsyncApiPackage;
import io.github.abelgomez.asyncapi.asyncApi.GuaranteeTerm;
import io.github.abelgomez.asyncapi.asyncApi.QualifyingCondition;
import io.github.abelgomez.asyncapi.asyncApi.Scope;
import io.github.abelgomez.asyncapi.asyncApi.Slo;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Guarantee Term</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.github.abelgomez.asyncapi.asyncApi.impl.GuaranteeTermImpl#getScopes <em>Scopes</em>}</li>
 *   <li>{@link io.github.abelgomez.asyncapi.asyncApi.impl.GuaranteeTermImpl#getScope <em>Scope</em>}</li>
 *   <li>{@link io.github.abelgomez.asyncapi.asyncApi.impl.GuaranteeTermImpl#getQualifyingConditions <em>Qualifying Conditions</em>}</li>
 *   <li>{@link io.github.abelgomez.asyncapi.asyncApi.impl.GuaranteeTermImpl#getQualifyingCondition <em>Qualifying Condition</em>}</li>
 *   <li>{@link io.github.abelgomez.asyncapi.asyncApi.impl.GuaranteeTermImpl#getSlos <em>Slos</em>}</li>
 *   <li>{@link io.github.abelgomez.asyncapi.asyncApi.impl.GuaranteeTermImpl#getSlo <em>Slo</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GuaranteeTermImpl extends MinimalEObjectImpl.Container implements GuaranteeTerm {
	/**
	 * The cached value of the '{@link #getScopes() <em>Scopes</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getScopes()
	 * @generated
	 * @ordered
	 */
	protected EList<Scope> scopes;

	/**
	 * The cached value of the '{@link #getScope() <em>Scope</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getScope()
	 * @generated
	 * @ordered
	 */
	protected EList<Scope> scope;

	/**
	 * The cached value of the '{@link #getQualifyingConditions() <em>Qualifying Conditions</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getQualifyingConditions()
	 * @generated
	 * @ordered
	 */
	protected EList<QualifyingCondition> qualifyingConditions;

	/**
	 * The cached value of the '{@link #getQualifyingCondition() <em>Qualifying Condition</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getQualifyingCondition()
	 * @generated
	 * @ordered
	 */
	protected EList<QualifyingCondition> qualifyingCondition;

	/**
	 * The cached value of the '{@link #getSlos() <em>Slos</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSlos()
	 * @generated
	 * @ordered
	 */
	protected EList<Slo> slos;

	/**
	 * The cached value of the '{@link #getSlo() <em>Slo</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSlo()
	 * @generated
	 * @ordered
	 */
	protected EList<Slo> slo;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GuaranteeTermImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return AsyncApiPackage.Literals.GUARANTEE_TERM;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<Scope> getScopes() {
		if (scopes == null) {
			scopes = new EObjectContainmentEList<Scope>(Scope.class, this, AsyncApiPackage.GUARANTEE_TERM__SCOPES);
		}
		return scopes;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<Scope> getScope() {
		if (scope == null) {
			scope = new EObjectContainmentEList<Scope>(Scope.class, this, AsyncApiPackage.GUARANTEE_TERM__SCOPE);
		}
		return scope;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<QualifyingCondition> getQualifyingConditions() {
		if (qualifyingConditions == null) {
			qualifyingConditions = new EObjectContainmentEList<QualifyingCondition>(QualifyingCondition.class, this, AsyncApiPackage.GUARANTEE_TERM__QUALIFYING_CONDITIONS);
		}
		return qualifyingConditions;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<QualifyingCondition> getQualifyingCondition() {
		if (qualifyingCondition == null) {
			qualifyingCondition = new EObjectContainmentEList<QualifyingCondition>(QualifyingCondition.class, this, AsyncApiPackage.GUARANTEE_TERM__QUALIFYING_CONDITION);
		}
		return qualifyingCondition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<Slo> getSlos() {
		if (slos == null) {
			slos = new EObjectContainmentEList<Slo>(Slo.class, this, AsyncApiPackage.GUARANTEE_TERM__SLOS);
		}
		return slos;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<Slo> getSlo() {
		if (slo == null) {
			slo = new EObjectContainmentEList<Slo>(Slo.class, this, AsyncApiPackage.GUARANTEE_TERM__SLO);
		}
		return slo;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case AsyncApiPackage.GUARANTEE_TERM__SCOPES:
				return ((InternalEList<?>)getScopes()).basicRemove(otherEnd, msgs);
			case AsyncApiPackage.GUARANTEE_TERM__SCOPE:
				return ((InternalEList<?>)getScope()).basicRemove(otherEnd, msgs);
			case AsyncApiPackage.GUARANTEE_TERM__QUALIFYING_CONDITIONS:
				return ((InternalEList<?>)getQualifyingConditions()).basicRemove(otherEnd, msgs);
			case AsyncApiPackage.GUARANTEE_TERM__QUALIFYING_CONDITION:
				return ((InternalEList<?>)getQualifyingCondition()).basicRemove(otherEnd, msgs);
			case AsyncApiPackage.GUARANTEE_TERM__SLOS:
				return ((InternalEList<?>)getSlos()).basicRemove(otherEnd, msgs);
			case AsyncApiPackage.GUARANTEE_TERM__SLO:
				return ((InternalEList<?>)getSlo()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case AsyncApiPackage.GUARANTEE_TERM__SCOPES:
				return getScopes();
			case AsyncApiPackage.GUARANTEE_TERM__SCOPE:
				return getScope();
			case AsyncApiPackage.GUARANTEE_TERM__QUALIFYING_CONDITIONS:
				return getQualifyingConditions();
			case AsyncApiPackage.GUARANTEE_TERM__QUALIFYING_CONDITION:
				return getQualifyingCondition();
			case AsyncApiPackage.GUARANTEE_TERM__SLOS:
				return getSlos();
			case AsyncApiPackage.GUARANTEE_TERM__SLO:
				return getSlo();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case AsyncApiPackage.GUARANTEE_TERM__SCOPES:
				getScopes().clear();
				getScopes().addAll((Collection<? extends Scope>)newValue);
				return;
			case AsyncApiPackage.GUARANTEE_TERM__SCOPE:
				getScope().clear();
				getScope().addAll((Collection<? extends Scope>)newValue);
				return;
			case AsyncApiPackage.GUARANTEE_TERM__QUALIFYING_CONDITIONS:
				getQualifyingConditions().clear();
				getQualifyingConditions().addAll((Collection<? extends QualifyingCondition>)newValue);
				return;
			case AsyncApiPackage.GUARANTEE_TERM__QUALIFYING_CONDITION:
				getQualifyingCondition().clear();
				getQualifyingCondition().addAll((Collection<? extends QualifyingCondition>)newValue);
				return;
			case AsyncApiPackage.GUARANTEE_TERM__SLOS:
				getSlos().clear();
				getSlos().addAll((Collection<? extends Slo>)newValue);
				return;
			case AsyncApiPackage.GUARANTEE_TERM__SLO:
				getSlo().clear();
				getSlo().addAll((Collection<? extends Slo>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case AsyncApiPackage.GUARANTEE_TERM__SCOPES:
				getScopes().clear();
				return;
			case AsyncApiPackage.GUARANTEE_TERM__SCOPE:
				getScope().clear();
				return;
			case AsyncApiPackage.GUARANTEE_TERM__QUALIFYING_CONDITIONS:
				getQualifyingConditions().clear();
				return;
			case AsyncApiPackage.GUARANTEE_TERM__QUALIFYING_CONDITION:
				getQualifyingCondition().clear();
				return;
			case AsyncApiPackage.GUARANTEE_TERM__SLOS:
				getSlos().clear();
				return;
			case AsyncApiPackage.GUARANTEE_TERM__SLO:
				getSlo().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case AsyncApiPackage.GUARANTEE_TERM__SCOPES:
				return scopes != null && !scopes.isEmpty();
			case AsyncApiPackage.GUARANTEE_TERM__SCOPE:
				return scope != null && !scope.isEmpty();
			case AsyncApiPackage.GUARANTEE_TERM__QUALIFYING_CONDITIONS:
				return qualifyingConditions != null && !qualifyingConditions.isEmpty();
			case AsyncApiPackage.GUARANTEE_TERM__QUALIFYING_CONDITION:
				return qualifyingCondition != null && !qualifyingCondition.isEmpty();
			case AsyncApiPackage.GUARANTEE_TERM__SLOS:
				return slos != null && !slos.isEmpty();
			case AsyncApiPackage.GUARANTEE_TERM__SLO:
				return slo != null && !slo.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //GuaranteeTermImpl
