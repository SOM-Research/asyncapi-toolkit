/*
 * generated by Xtext 2.17.0
 */
package io.github.abelgomez.asyncapi.serializer;

import com.google.inject.Inject;
import io.github.abelgomez.asyncapi.services.AsyncApiGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class AsyncApiSyntacticSequencer extends AbstractSyntacticSequencer {

	protected AsyncApiGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AsyncAPI_CommaKeyword_2_0_3_q;
	protected AbstractElementAlias match_AsyncAPI_CommaKeyword_2_1_3_q;
	protected AbstractElementAlias match_AsyncAPI_CommaKeyword_2_2_6_q;
	protected AbstractElementAlias match_AsyncAPI_CommaKeyword_2_3_6_q;
	protected AbstractElementAlias match_AsyncAPI_CommaKeyword_2_4_3_q;
	protected AbstractElementAlias match_AsyncAPI_CommaKeyword_2_5_3_q;
	protected AbstractElementAlias match_Components_CommaKeyword_2_0_6_q;
	protected AbstractElementAlias match_Components_CommaKeyword_2_1_6_q;
	protected AbstractElementAlias match_Contact_CommaKeyword_2_0_3_q;
	protected AbstractElementAlias match_Contact_CommaKeyword_2_1_3_q;
	protected AbstractElementAlias match_Contact_CommaKeyword_2_2_3_q;
	protected AbstractElementAlias match_Info_CommaKeyword_2_0_3_q;
	protected AbstractElementAlias match_Info_CommaKeyword_2_1_3_q;
	protected AbstractElementAlias match_Info_CommaKeyword_2_2_3_q;
	protected AbstractElementAlias match_Info_CommaKeyword_2_3_3_q;
	protected AbstractElementAlias match_Info_CommaKeyword_2_4_3_q;
	protected AbstractElementAlias match_Info_CommaKeyword_2_5_3_q;
	protected AbstractElementAlias match_License_CommaKeyword_2_0_3_q;
	protected AbstractElementAlias match_License_CommaKeyword_2_1_3_q;
	protected AbstractElementAlias match_Message_CommaKeyword_2_0_3_q;
	protected AbstractElementAlias match_Message_CommaKeyword_2_1_3_q;
	protected AbstractElementAlias match_Message_CommaKeyword_2_2_3_q;
	protected AbstractElementAlias match_Message_CommaKeyword_2_3_3_q;
	protected AbstractElementAlias match_Message_CommaKeyword_2_4_6_q;
	protected AbstractElementAlias match_Message_CommaKeyword_2_5_3_q;
	protected AbstractElementAlias match_Schema_CommaKeyword_2_0_3_q;
	protected AbstractElementAlias match_Schema_CommaKeyword_2_10_3_q;
	protected AbstractElementAlias match_Schema_CommaKeyword_2_1_3_q;
	protected AbstractElementAlias match_Schema_CommaKeyword_2_2_3_q;
	protected AbstractElementAlias match_Schema_CommaKeyword_2_3_3_q;
	protected AbstractElementAlias match_Schema_CommaKeyword_2_4_3_q;
	protected AbstractElementAlias match_Schema_CommaKeyword_2_5_3_q;
	protected AbstractElementAlias match_Schema_CommaKeyword_2_6_6_q;
	protected AbstractElementAlias match_Schema_CommaKeyword_2_7_6_q;
	protected AbstractElementAlias match_Schema_CommaKeyword_2_8_3_q;
	protected AbstractElementAlias match_Schema_CommaKeyword_2_9_6_q;
	protected AbstractElementAlias match_Server_CommaKeyword_2_0_3_q;
	protected AbstractElementAlias match_Server_CommaKeyword_2_1_3_q;
	protected AbstractElementAlias match_Server_CommaKeyword_2_3_6_q;
	protected AbstractElementAlias match_Tag_CommaKeyword_2_0_3_q;
	protected AbstractElementAlias match_Tag_CommaKeyword_2_1_3_q;
	protected AbstractElementAlias match_Topic_CommaKeyword_4_0_3_q;
	protected AbstractElementAlias match_Topic_CommaKeyword_4_1_3_q;
	protected AbstractElementAlias match_Variable_CommaKeyword_4_0_3_q;
	protected AbstractElementAlias match_Variable_CommaKeyword_4_1_3_q;
	protected AbstractElementAlias match_Variable_CommaKeyword_4_2_6_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (AsyncApiGrammarAccess) access;
		match_AsyncAPI_CommaKeyword_2_0_3_q = new TokenAlias(false, true, grammarAccess.getAsyncAPIAccess().getCommaKeyword_2_0_3());
		match_AsyncAPI_CommaKeyword_2_1_3_q = new TokenAlias(false, true, grammarAccess.getAsyncAPIAccess().getCommaKeyword_2_1_3());
		match_AsyncAPI_CommaKeyword_2_2_6_q = new TokenAlias(false, true, grammarAccess.getAsyncAPIAccess().getCommaKeyword_2_2_6());
		match_AsyncAPI_CommaKeyword_2_3_6_q = new TokenAlias(false, true, grammarAccess.getAsyncAPIAccess().getCommaKeyword_2_3_6());
		match_AsyncAPI_CommaKeyword_2_4_3_q = new TokenAlias(false, true, grammarAccess.getAsyncAPIAccess().getCommaKeyword_2_4_3());
		match_AsyncAPI_CommaKeyword_2_5_3_q = new TokenAlias(false, true, grammarAccess.getAsyncAPIAccess().getCommaKeyword_2_5_3());
		match_Components_CommaKeyword_2_0_6_q = new TokenAlias(false, true, grammarAccess.getComponentsAccess().getCommaKeyword_2_0_6());
		match_Components_CommaKeyword_2_1_6_q = new TokenAlias(false, true, grammarAccess.getComponentsAccess().getCommaKeyword_2_1_6());
		match_Contact_CommaKeyword_2_0_3_q = new TokenAlias(false, true, grammarAccess.getContactAccess().getCommaKeyword_2_0_3());
		match_Contact_CommaKeyword_2_1_3_q = new TokenAlias(false, true, grammarAccess.getContactAccess().getCommaKeyword_2_1_3());
		match_Contact_CommaKeyword_2_2_3_q = new TokenAlias(false, true, grammarAccess.getContactAccess().getCommaKeyword_2_2_3());
		match_Info_CommaKeyword_2_0_3_q = new TokenAlias(false, true, grammarAccess.getInfoAccess().getCommaKeyword_2_0_3());
		match_Info_CommaKeyword_2_1_3_q = new TokenAlias(false, true, grammarAccess.getInfoAccess().getCommaKeyword_2_1_3());
		match_Info_CommaKeyword_2_2_3_q = new TokenAlias(false, true, grammarAccess.getInfoAccess().getCommaKeyword_2_2_3());
		match_Info_CommaKeyword_2_3_3_q = new TokenAlias(false, true, grammarAccess.getInfoAccess().getCommaKeyword_2_3_3());
		match_Info_CommaKeyword_2_4_3_q = new TokenAlias(false, true, grammarAccess.getInfoAccess().getCommaKeyword_2_4_3());
		match_Info_CommaKeyword_2_5_3_q = new TokenAlias(false, true, grammarAccess.getInfoAccess().getCommaKeyword_2_5_3());
		match_License_CommaKeyword_2_0_3_q = new TokenAlias(false, true, grammarAccess.getLicenseAccess().getCommaKeyword_2_0_3());
		match_License_CommaKeyword_2_1_3_q = new TokenAlias(false, true, grammarAccess.getLicenseAccess().getCommaKeyword_2_1_3());
		match_Message_CommaKeyword_2_0_3_q = new TokenAlias(false, true, grammarAccess.getMessageAccess().getCommaKeyword_2_0_3());
		match_Message_CommaKeyword_2_1_3_q = new TokenAlias(false, true, grammarAccess.getMessageAccess().getCommaKeyword_2_1_3());
		match_Message_CommaKeyword_2_2_3_q = new TokenAlias(false, true, grammarAccess.getMessageAccess().getCommaKeyword_2_2_3());
		match_Message_CommaKeyword_2_3_3_q = new TokenAlias(false, true, grammarAccess.getMessageAccess().getCommaKeyword_2_3_3());
		match_Message_CommaKeyword_2_4_6_q = new TokenAlias(false, true, grammarAccess.getMessageAccess().getCommaKeyword_2_4_6());
		match_Message_CommaKeyword_2_5_3_q = new TokenAlias(false, true, grammarAccess.getMessageAccess().getCommaKeyword_2_5_3());
		match_Schema_CommaKeyword_2_0_3_q = new TokenAlias(false, true, grammarAccess.getSchemaAccess().getCommaKeyword_2_0_3());
		match_Schema_CommaKeyword_2_10_3_q = new TokenAlias(false, true, grammarAccess.getSchemaAccess().getCommaKeyword_2_10_3());
		match_Schema_CommaKeyword_2_1_3_q = new TokenAlias(false, true, grammarAccess.getSchemaAccess().getCommaKeyword_2_1_3());
		match_Schema_CommaKeyword_2_2_3_q = new TokenAlias(false, true, grammarAccess.getSchemaAccess().getCommaKeyword_2_2_3());
		match_Schema_CommaKeyword_2_3_3_q = new TokenAlias(false, true, grammarAccess.getSchemaAccess().getCommaKeyword_2_3_3());
		match_Schema_CommaKeyword_2_4_3_q = new TokenAlias(false, true, grammarAccess.getSchemaAccess().getCommaKeyword_2_4_3());
		match_Schema_CommaKeyword_2_5_3_q = new TokenAlias(false, true, grammarAccess.getSchemaAccess().getCommaKeyword_2_5_3());
		match_Schema_CommaKeyword_2_6_6_q = new TokenAlias(false, true, grammarAccess.getSchemaAccess().getCommaKeyword_2_6_6());
		match_Schema_CommaKeyword_2_7_6_q = new TokenAlias(false, true, grammarAccess.getSchemaAccess().getCommaKeyword_2_7_6());
		match_Schema_CommaKeyword_2_8_3_q = new TokenAlias(false, true, grammarAccess.getSchemaAccess().getCommaKeyword_2_8_3());
		match_Schema_CommaKeyword_2_9_6_q = new TokenAlias(false, true, grammarAccess.getSchemaAccess().getCommaKeyword_2_9_6());
		match_Server_CommaKeyword_2_0_3_q = new TokenAlias(false, true, grammarAccess.getServerAccess().getCommaKeyword_2_0_3());
		match_Server_CommaKeyword_2_1_3_q = new TokenAlias(false, true, grammarAccess.getServerAccess().getCommaKeyword_2_1_3());
		match_Server_CommaKeyword_2_3_6_q = new TokenAlias(false, true, grammarAccess.getServerAccess().getCommaKeyword_2_3_6());
		match_Tag_CommaKeyword_2_0_3_q = new TokenAlias(false, true, grammarAccess.getTagAccess().getCommaKeyword_2_0_3());
		match_Tag_CommaKeyword_2_1_3_q = new TokenAlias(false, true, grammarAccess.getTagAccess().getCommaKeyword_2_1_3());
		match_Topic_CommaKeyword_4_0_3_q = new TokenAlias(false, true, grammarAccess.getTopicAccess().getCommaKeyword_4_0_3());
		match_Topic_CommaKeyword_4_1_3_q = new TokenAlias(false, true, grammarAccess.getTopicAccess().getCommaKeyword_4_1_3());
		match_Variable_CommaKeyword_4_0_3_q = new TokenAlias(false, true, grammarAccess.getVariableAccess().getCommaKeyword_4_0_3());
		match_Variable_CommaKeyword_4_1_3_q = new TokenAlias(false, true, grammarAccess.getVariableAccess().getCommaKeyword_4_1_3());
		match_Variable_CommaKeyword_4_2_6_q = new TokenAlias(false, true, grammarAccess.getVariableAccess().getCommaKeyword_4_2_6());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AsyncAPI_CommaKeyword_2_0_3_q.equals(syntax))
				emit_AsyncAPI_CommaKeyword_2_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AsyncAPI_CommaKeyword_2_1_3_q.equals(syntax))
				emit_AsyncAPI_CommaKeyword_2_1_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AsyncAPI_CommaKeyword_2_2_6_q.equals(syntax))
				emit_AsyncAPI_CommaKeyword_2_2_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AsyncAPI_CommaKeyword_2_3_6_q.equals(syntax))
				emit_AsyncAPI_CommaKeyword_2_3_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AsyncAPI_CommaKeyword_2_4_3_q.equals(syntax))
				emit_AsyncAPI_CommaKeyword_2_4_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AsyncAPI_CommaKeyword_2_5_3_q.equals(syntax))
				emit_AsyncAPI_CommaKeyword_2_5_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Components_CommaKeyword_2_0_6_q.equals(syntax))
				emit_Components_CommaKeyword_2_0_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Components_CommaKeyword_2_1_6_q.equals(syntax))
				emit_Components_CommaKeyword_2_1_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Contact_CommaKeyword_2_0_3_q.equals(syntax))
				emit_Contact_CommaKeyword_2_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Contact_CommaKeyword_2_1_3_q.equals(syntax))
				emit_Contact_CommaKeyword_2_1_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Contact_CommaKeyword_2_2_3_q.equals(syntax))
				emit_Contact_CommaKeyword_2_2_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Info_CommaKeyword_2_0_3_q.equals(syntax))
				emit_Info_CommaKeyword_2_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Info_CommaKeyword_2_1_3_q.equals(syntax))
				emit_Info_CommaKeyword_2_1_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Info_CommaKeyword_2_2_3_q.equals(syntax))
				emit_Info_CommaKeyword_2_2_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Info_CommaKeyword_2_3_3_q.equals(syntax))
				emit_Info_CommaKeyword_2_3_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Info_CommaKeyword_2_4_3_q.equals(syntax))
				emit_Info_CommaKeyword_2_4_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Info_CommaKeyword_2_5_3_q.equals(syntax))
				emit_Info_CommaKeyword_2_5_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_License_CommaKeyword_2_0_3_q.equals(syntax))
				emit_License_CommaKeyword_2_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_License_CommaKeyword_2_1_3_q.equals(syntax))
				emit_License_CommaKeyword_2_1_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Message_CommaKeyword_2_0_3_q.equals(syntax))
				emit_Message_CommaKeyword_2_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Message_CommaKeyword_2_1_3_q.equals(syntax))
				emit_Message_CommaKeyword_2_1_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Message_CommaKeyword_2_2_3_q.equals(syntax))
				emit_Message_CommaKeyword_2_2_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Message_CommaKeyword_2_3_3_q.equals(syntax))
				emit_Message_CommaKeyword_2_3_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Message_CommaKeyword_2_4_6_q.equals(syntax))
				emit_Message_CommaKeyword_2_4_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Message_CommaKeyword_2_5_3_q.equals(syntax))
				emit_Message_CommaKeyword_2_5_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Schema_CommaKeyword_2_0_3_q.equals(syntax))
				emit_Schema_CommaKeyword_2_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Schema_CommaKeyword_2_10_3_q.equals(syntax))
				emit_Schema_CommaKeyword_2_10_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Schema_CommaKeyword_2_1_3_q.equals(syntax))
				emit_Schema_CommaKeyword_2_1_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Schema_CommaKeyword_2_2_3_q.equals(syntax))
				emit_Schema_CommaKeyword_2_2_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Schema_CommaKeyword_2_3_3_q.equals(syntax))
				emit_Schema_CommaKeyword_2_3_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Schema_CommaKeyword_2_4_3_q.equals(syntax))
				emit_Schema_CommaKeyword_2_4_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Schema_CommaKeyword_2_5_3_q.equals(syntax))
				emit_Schema_CommaKeyword_2_5_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Schema_CommaKeyword_2_6_6_q.equals(syntax))
				emit_Schema_CommaKeyword_2_6_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Schema_CommaKeyword_2_7_6_q.equals(syntax))
				emit_Schema_CommaKeyword_2_7_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Schema_CommaKeyword_2_8_3_q.equals(syntax))
				emit_Schema_CommaKeyword_2_8_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Schema_CommaKeyword_2_9_6_q.equals(syntax))
				emit_Schema_CommaKeyword_2_9_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Server_CommaKeyword_2_0_3_q.equals(syntax))
				emit_Server_CommaKeyword_2_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Server_CommaKeyword_2_1_3_q.equals(syntax))
				emit_Server_CommaKeyword_2_1_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Server_CommaKeyword_2_3_6_q.equals(syntax))
				emit_Server_CommaKeyword_2_3_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Tag_CommaKeyword_2_0_3_q.equals(syntax))
				emit_Tag_CommaKeyword_2_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Tag_CommaKeyword_2_1_3_q.equals(syntax))
				emit_Tag_CommaKeyword_2_1_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Topic_CommaKeyword_4_0_3_q.equals(syntax))
				emit_Topic_CommaKeyword_4_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Topic_CommaKeyword_4_1_3_q.equals(syntax))
				emit_Topic_CommaKeyword_4_1_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Variable_CommaKeyword_4_0_3_q.equals(syntax))
				emit_Variable_CommaKeyword_4_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Variable_CommaKeyword_4_1_3_q.equals(syntax))
				emit_Variable_CommaKeyword_4_1_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Variable_CommaKeyword_4_2_6_q.equals(syntax))
				emit_Variable_CommaKeyword_4_2_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     version=VersionNumber (ambiguity) '"asyncapi"' ':' version=VersionNumber
	 *     version=VersionNumber (ambiguity) '"baseTopic"' ':' baseTopic=STRING
	 *     version=VersionNumber (ambiguity) '"components"' ':' components=Components
	 *     version=VersionNumber (ambiguity) '"info"' ':' info=Info
	 *     version=VersionNumber (ambiguity) '"servers"' ':' '[' servers+=Server
	 *     version=VersionNumber (ambiguity) '"topics"' ':' '{' topics+=Topic
	 *     version=VersionNumber (ambiguity) '}' (rule end)
	 */
	protected void emit_AsyncAPI_CommaKeyword_2_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     info=Info (ambiguity) '"asyncapi"' ':' version=VersionNumber
	 *     info=Info (ambiguity) '"baseTopic"' ':' baseTopic=STRING
	 *     info=Info (ambiguity) '"components"' ':' components=Components
	 *     info=Info (ambiguity) '"info"' ':' info=Info
	 *     info=Info (ambiguity) '"servers"' ':' '[' servers+=Server
	 *     info=Info (ambiguity) '"topics"' ':' '{' topics+=Topic
	 *     info=Info (ambiguity) '}' (rule end)
	 */
	protected void emit_AsyncAPI_CommaKeyword_2_1_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     servers+=Server ']' (ambiguity) '"asyncapi"' ':' version=VersionNumber
	 *     servers+=Server ']' (ambiguity) '"baseTopic"' ':' baseTopic=STRING
	 *     servers+=Server ']' (ambiguity) '"components"' ':' components=Components
	 *     servers+=Server ']' (ambiguity) '"info"' ':' info=Info
	 *     servers+=Server ']' (ambiguity) '"servers"' ':' '[' servers+=Server
	 *     servers+=Server ']' (ambiguity) '"topics"' ':' '{' topics+=Topic
	 *     servers+=Server ']' (ambiguity) '}' (rule end)
	 */
	protected void emit_AsyncAPI_CommaKeyword_2_2_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     topics+=Topic '}' (ambiguity) '"asyncapi"' ':' version=VersionNumber
	 *     topics+=Topic '}' (ambiguity) '"baseTopic"' ':' baseTopic=STRING
	 *     topics+=Topic '}' (ambiguity) '"components"' ':' components=Components
	 *     topics+=Topic '}' (ambiguity) '"info"' ':' info=Info
	 *     topics+=Topic '}' (ambiguity) '"servers"' ':' '[' servers+=Server
	 *     topics+=Topic '}' (ambiguity) '"topics"' ':' '{' topics+=Topic
	 *     topics+=Topic '}' (ambiguity) '}' (rule end)
	 */
	protected void emit_AsyncAPI_CommaKeyword_2_3_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     components=Components (ambiguity) '"asyncapi"' ':' version=VersionNumber
	 *     components=Components (ambiguity) '"baseTopic"' ':' baseTopic=STRING
	 *     components=Components (ambiguity) '"components"' ':' components=Components
	 *     components=Components (ambiguity) '"info"' ':' info=Info
	 *     components=Components (ambiguity) '"servers"' ':' '[' servers+=Server
	 *     components=Components (ambiguity) '"topics"' ':' '{' topics+=Topic
	 *     components=Components (ambiguity) '}' (rule end)
	 */
	protected void emit_AsyncAPI_CommaKeyword_2_4_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     baseTopic=STRING (ambiguity) '"asyncapi"' ':' version=VersionNumber
	 *     baseTopic=STRING (ambiguity) '"baseTopic"' ':' baseTopic=STRING
	 *     baseTopic=STRING (ambiguity) '"components"' ':' components=Components
	 *     baseTopic=STRING (ambiguity) '"info"' ':' info=Info
	 *     baseTopic=STRING (ambiguity) '"servers"' ':' '[' servers+=Server
	 *     baseTopic=STRING (ambiguity) '"topics"' ':' '{' topics+=Topic
	 *     baseTopic=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_AsyncAPI_CommaKeyword_2_5_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     schemas+=NamedSchema '}' (ambiguity) '"messages"' ':' '{' messages+=NamedMessage
	 *     schemas+=NamedSchema '}' (ambiguity) '"schemas"' ':' '{' schemas+=NamedSchema
	 *     schemas+=NamedSchema '}' (ambiguity) '}' (rule end)
	 */
	protected void emit_Components_CommaKeyword_2_0_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     messages+=NamedMessage '}' (ambiguity) '"messages"' ':' '{' messages+=NamedMessage
	 *     messages+=NamedMessage '}' (ambiguity) '"schemas"' ':' '{' schemas+=NamedSchema
	 *     messages+=NamedMessage '}' (ambiguity) '}' (rule end)
	 */
	protected void emit_Components_CommaKeyword_2_1_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=STRING (ambiguity) '"email"' ':' email=STRING
	 *     name=STRING (ambiguity) '"name"' ':' name=STRING
	 *     name=STRING (ambiguity) '"url"' ':' url=STRING
	 *     name=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_Contact_CommaKeyword_2_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     url=STRING (ambiguity) '"email"' ':' email=STRING
	 *     url=STRING (ambiguity) '"name"' ':' name=STRING
	 *     url=STRING (ambiguity) '"url"' ':' url=STRING
	 *     url=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_Contact_CommaKeyword_2_1_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     email=STRING (ambiguity) '"email"' ':' email=STRING
	 *     email=STRING (ambiguity) '"name"' ':' name=STRING
	 *     email=STRING (ambiguity) '"url"' ':' url=STRING
	 *     email=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_Contact_CommaKeyword_2_2_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     title=STRING (ambiguity) '"contact"' ':' contact=Contact
	 *     title=STRING (ambiguity) '"description"' ':' description=STRING
	 *     title=STRING (ambiguity) '"license"' ':' license=License
	 *     title=STRING (ambiguity) '"termsOfService"' ':' termsOfService=STRING
	 *     title=STRING (ambiguity) '"title"' ':' title=STRING
	 *     title=STRING (ambiguity) '"version"' ':' version=STRING
	 *     title=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_Info_CommaKeyword_2_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     version=STRING (ambiguity) '"contact"' ':' contact=Contact
	 *     version=STRING (ambiguity) '"description"' ':' description=STRING
	 *     version=STRING (ambiguity) '"license"' ':' license=License
	 *     version=STRING (ambiguity) '"termsOfService"' ':' termsOfService=STRING
	 *     version=STRING (ambiguity) '"title"' ':' title=STRING
	 *     version=STRING (ambiguity) '"version"' ':' version=STRING
	 *     version=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_Info_CommaKeyword_2_1_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     description=STRING (ambiguity) '"contact"' ':' contact=Contact
	 *     description=STRING (ambiguity) '"description"' ':' description=STRING
	 *     description=STRING (ambiguity) '"license"' ':' license=License
	 *     description=STRING (ambiguity) '"termsOfService"' ':' termsOfService=STRING
	 *     description=STRING (ambiguity) '"title"' ':' title=STRING
	 *     description=STRING (ambiguity) '"version"' ':' version=STRING
	 *     description=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_Info_CommaKeyword_2_2_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     termsOfService=STRING (ambiguity) '"contact"' ':' contact=Contact
	 *     termsOfService=STRING (ambiguity) '"description"' ':' description=STRING
	 *     termsOfService=STRING (ambiguity) '"license"' ':' license=License
	 *     termsOfService=STRING (ambiguity) '"termsOfService"' ':' termsOfService=STRING
	 *     termsOfService=STRING (ambiguity) '"title"' ':' title=STRING
	 *     termsOfService=STRING (ambiguity) '"version"' ':' version=STRING
	 *     termsOfService=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_Info_CommaKeyword_2_3_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     contact=Contact (ambiguity) '"contact"' ':' contact=Contact
	 *     contact=Contact (ambiguity) '"description"' ':' description=STRING
	 *     contact=Contact (ambiguity) '"license"' ':' license=License
	 *     contact=Contact (ambiguity) '"termsOfService"' ':' termsOfService=STRING
	 *     contact=Contact (ambiguity) '"title"' ':' title=STRING
	 *     contact=Contact (ambiguity) '"version"' ':' version=STRING
	 *     contact=Contact (ambiguity) '}' (rule end)
	 */
	protected void emit_Info_CommaKeyword_2_4_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     license=License (ambiguity) '"contact"' ':' contact=Contact
	 *     license=License (ambiguity) '"description"' ':' description=STRING
	 *     license=License (ambiguity) '"license"' ':' license=License
	 *     license=License (ambiguity) '"termsOfService"' ':' termsOfService=STRING
	 *     license=License (ambiguity) '"title"' ':' title=STRING
	 *     license=License (ambiguity) '"version"' ':' version=STRING
	 *     license=License (ambiguity) '}' (rule end)
	 */
	protected void emit_Info_CommaKeyword_2_5_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=STRING (ambiguity) '"name"' ':' name=STRING
	 *     name=STRING (ambiguity) '"url"' ':' url=STRING
	 *     name=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_License_CommaKeyword_2_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     url=STRING (ambiguity) '"name"' ':' name=STRING
	 *     url=STRING (ambiguity) '"url"' ':' url=STRING
	 *     url=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_License_CommaKeyword_2_1_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     summary=STRING (ambiguity) '"deprecated"' ':' deprecated=Boolean
	 *     summary=STRING (ambiguity) '"description"' ':' description=STRING
	 *     summary=STRING (ambiguity) '"headers"' ':' headers=AbstractSchema
	 *     summary=STRING (ambiguity) '"payload"' ':' payload=AbstractSchema
	 *     summary=STRING (ambiguity) '"summary"' ':' summary=STRING
	 *     summary=STRING (ambiguity) '"tags"' ':' '[' tags+=Tag
	 *     summary=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_Message_CommaKeyword_2_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     description=STRING (ambiguity) '"deprecated"' ':' deprecated=Boolean
	 *     description=STRING (ambiguity) '"description"' ':' description=STRING
	 *     description=STRING (ambiguity) '"headers"' ':' headers=AbstractSchema
	 *     description=STRING (ambiguity) '"payload"' ':' payload=AbstractSchema
	 *     description=STRING (ambiguity) '"summary"' ':' summary=STRING
	 *     description=STRING (ambiguity) '"tags"' ':' '[' tags+=Tag
	 *     description=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_Message_CommaKeyword_2_1_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     deprecated=Boolean (ambiguity) '"deprecated"' ':' deprecated=Boolean
	 *     deprecated=Boolean (ambiguity) '"description"' ':' description=STRING
	 *     deprecated=Boolean (ambiguity) '"headers"' ':' headers=AbstractSchema
	 *     deprecated=Boolean (ambiguity) '"payload"' ':' payload=AbstractSchema
	 *     deprecated=Boolean (ambiguity) '"summary"' ':' summary=STRING
	 *     deprecated=Boolean (ambiguity) '"tags"' ':' '[' tags+=Tag
	 *     deprecated=Boolean (ambiguity) '}' (rule end)
	 */
	protected void emit_Message_CommaKeyword_2_2_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     headers=AbstractSchema (ambiguity) '"deprecated"' ':' deprecated=Boolean
	 *     headers=AbstractSchema (ambiguity) '"description"' ':' description=STRING
	 *     headers=AbstractSchema (ambiguity) '"headers"' ':' headers=AbstractSchema
	 *     headers=AbstractSchema (ambiguity) '"payload"' ':' payload=AbstractSchema
	 *     headers=AbstractSchema (ambiguity) '"summary"' ':' summary=STRING
	 *     headers=AbstractSchema (ambiguity) '"tags"' ':' '[' tags+=Tag
	 *     headers=AbstractSchema (ambiguity) '}' (rule end)
	 */
	protected void emit_Message_CommaKeyword_2_3_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Tag ']' (ambiguity) '"deprecated"' ':' deprecated=Boolean
	 *     tags+=Tag ']' (ambiguity) '"description"' ':' description=STRING
	 *     tags+=Tag ']' (ambiguity) '"headers"' ':' headers=AbstractSchema
	 *     tags+=Tag ']' (ambiguity) '"payload"' ':' payload=AbstractSchema
	 *     tags+=Tag ']' (ambiguity) '"summary"' ':' summary=STRING
	 *     tags+=Tag ']' (ambiguity) '"tags"' ':' '[' tags+=Tag
	 *     tags+=Tag ']' (ambiguity) '}' (rule end)
	 */
	protected void emit_Message_CommaKeyword_2_4_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     payload=AbstractSchema (ambiguity) '"deprecated"' ':' deprecated=Boolean
	 *     payload=AbstractSchema (ambiguity) '"description"' ':' description=STRING
	 *     payload=AbstractSchema (ambiguity) '"headers"' ':' headers=AbstractSchema
	 *     payload=AbstractSchema (ambiguity) '"payload"' ':' payload=AbstractSchema
	 *     payload=AbstractSchema (ambiguity) '"summary"' ':' summary=STRING
	 *     payload=AbstractSchema (ambiguity) '"tags"' ':' '[' tags+=Tag
	 *     payload=AbstractSchema (ambiguity) '}' (rule end)
	 */
	protected void emit_Message_CommaKeyword_2_5_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     title=STRING (ambiguity) '"default"' ':' default=PrimitiveValue
	 *     title=STRING (ambiguity) '"description"' ':' description=STRING
	 *     title=STRING (ambiguity) '"enum"' ':' '[' enum+=PrimitiveValue
	 *     title=STRING (ambiguity) '"format"' ':' format=STRING
	 *     title=STRING (ambiguity) '"items"' ':' items=AbstractSchema
	 *     title=STRING (ambiguity) '"payload"' ':' payload=AbstractSchema
	 *     title=STRING (ambiguity) '"properties"' ':' '{' properties+=NamedSchema
	 *     title=STRING (ambiguity) '"required"' ':' '[' required+=STRING
	 *     title=STRING (ambiguity) '"title"' ':' title=STRING
	 *     title=STRING (ambiguity) '"type"' ':' type=STRING
	 *     title=STRING (ambiguity) '"x-friendly-name"' ':' friendlyName=STRING
	 *     title=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_Schema_CommaKeyword_2_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     friendlyName=STRING (ambiguity) '"default"' ':' default=PrimitiveValue
	 *     friendlyName=STRING (ambiguity) '"description"' ':' description=STRING
	 *     friendlyName=STRING (ambiguity) '"enum"' ':' '[' enum+=PrimitiveValue
	 *     friendlyName=STRING (ambiguity) '"format"' ':' format=STRING
	 *     friendlyName=STRING (ambiguity) '"items"' ':' items=AbstractSchema
	 *     friendlyName=STRING (ambiguity) '"payload"' ':' payload=AbstractSchema
	 *     friendlyName=STRING (ambiguity) '"properties"' ':' '{' properties+=NamedSchema
	 *     friendlyName=STRING (ambiguity) '"required"' ':' '[' required+=STRING
	 *     friendlyName=STRING (ambiguity) '"title"' ':' title=STRING
	 *     friendlyName=STRING (ambiguity) '"type"' ':' type=STRING
	 *     friendlyName=STRING (ambiguity) '"x-friendly-name"' ':' friendlyName=STRING
	 *     friendlyName=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_Schema_CommaKeyword_2_10_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     type=STRING (ambiguity) '"default"' ':' default=PrimitiveValue
	 *     type=STRING (ambiguity) '"description"' ':' description=STRING
	 *     type=STRING (ambiguity) '"enum"' ':' '[' enum+=PrimitiveValue
	 *     type=STRING (ambiguity) '"format"' ':' format=STRING
	 *     type=STRING (ambiguity) '"items"' ':' items=AbstractSchema
	 *     type=STRING (ambiguity) '"payload"' ':' payload=AbstractSchema
	 *     type=STRING (ambiguity) '"properties"' ':' '{' properties+=NamedSchema
	 *     type=STRING (ambiguity) '"required"' ':' '[' required+=STRING
	 *     type=STRING (ambiguity) '"title"' ':' title=STRING
	 *     type=STRING (ambiguity) '"type"' ':' type=STRING
	 *     type=STRING (ambiguity) '"x-friendly-name"' ':' friendlyName=STRING
	 *     type=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_Schema_CommaKeyword_2_1_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     description=STRING (ambiguity) '"default"' ':' default=PrimitiveValue
	 *     description=STRING (ambiguity) '"description"' ':' description=STRING
	 *     description=STRING (ambiguity) '"enum"' ':' '[' enum+=PrimitiveValue
	 *     description=STRING (ambiguity) '"format"' ':' format=STRING
	 *     description=STRING (ambiguity) '"items"' ':' items=AbstractSchema
	 *     description=STRING (ambiguity) '"payload"' ':' payload=AbstractSchema
	 *     description=STRING (ambiguity) '"properties"' ':' '{' properties+=NamedSchema
	 *     description=STRING (ambiguity) '"required"' ':' '[' required+=STRING
	 *     description=STRING (ambiguity) '"title"' ':' title=STRING
	 *     description=STRING (ambiguity) '"type"' ':' type=STRING
	 *     description=STRING (ambiguity) '"x-friendly-name"' ':' friendlyName=STRING
	 *     description=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_Schema_CommaKeyword_2_2_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     format=STRING (ambiguity) '"default"' ':' default=PrimitiveValue
	 *     format=STRING (ambiguity) '"description"' ':' description=STRING
	 *     format=STRING (ambiguity) '"enum"' ':' '[' enum+=PrimitiveValue
	 *     format=STRING (ambiguity) '"format"' ':' format=STRING
	 *     format=STRING (ambiguity) '"items"' ':' items=AbstractSchema
	 *     format=STRING (ambiguity) '"payload"' ':' payload=AbstractSchema
	 *     format=STRING (ambiguity) '"properties"' ':' '{' properties+=NamedSchema
	 *     format=STRING (ambiguity) '"required"' ':' '[' required+=STRING
	 *     format=STRING (ambiguity) '"title"' ':' title=STRING
	 *     format=STRING (ambiguity) '"type"' ':' type=STRING
	 *     format=STRING (ambiguity) '"x-friendly-name"' ':' friendlyName=STRING
	 *     format=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_Schema_CommaKeyword_2_3_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     default=PrimitiveValue (ambiguity) '"default"' ':' default=PrimitiveValue
	 *     default=PrimitiveValue (ambiguity) '"description"' ':' description=STRING
	 *     default=PrimitiveValue (ambiguity) '"enum"' ':' '[' enum+=PrimitiveValue
	 *     default=PrimitiveValue (ambiguity) '"format"' ':' format=STRING
	 *     default=PrimitiveValue (ambiguity) '"items"' ':' items=AbstractSchema
	 *     default=PrimitiveValue (ambiguity) '"payload"' ':' payload=AbstractSchema
	 *     default=PrimitiveValue (ambiguity) '"properties"' ':' '{' properties+=NamedSchema
	 *     default=PrimitiveValue (ambiguity) '"required"' ':' '[' required+=STRING
	 *     default=PrimitiveValue (ambiguity) '"title"' ':' title=STRING
	 *     default=PrimitiveValue (ambiguity) '"type"' ':' type=STRING
	 *     default=PrimitiveValue (ambiguity) '"x-friendly-name"' ':' friendlyName=STRING
	 *     default=PrimitiveValue (ambiguity) '}' (rule end)
	 */
	protected void emit_Schema_CommaKeyword_2_4_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     payload=AbstractSchema (ambiguity) '"default"' ':' default=PrimitiveValue
	 *     payload=AbstractSchema (ambiguity) '"description"' ':' description=STRING
	 *     payload=AbstractSchema (ambiguity) '"enum"' ':' '[' enum+=PrimitiveValue
	 *     payload=AbstractSchema (ambiguity) '"format"' ':' format=STRING
	 *     payload=AbstractSchema (ambiguity) '"items"' ':' items=AbstractSchema
	 *     payload=AbstractSchema (ambiguity) '"payload"' ':' payload=AbstractSchema
	 *     payload=AbstractSchema (ambiguity) '"properties"' ':' '{' properties+=NamedSchema
	 *     payload=AbstractSchema (ambiguity) '"required"' ':' '[' required+=STRING
	 *     payload=AbstractSchema (ambiguity) '"title"' ':' title=STRING
	 *     payload=AbstractSchema (ambiguity) '"type"' ':' type=STRING
	 *     payload=AbstractSchema (ambiguity) '"x-friendly-name"' ':' friendlyName=STRING
	 *     payload=AbstractSchema (ambiguity) '}' (rule end)
	 */
	protected void emit_Schema_CommaKeyword_2_5_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     properties+=NamedSchema '}' (ambiguity) '"default"' ':' default=PrimitiveValue
	 *     properties+=NamedSchema '}' (ambiguity) '"description"' ':' description=STRING
	 *     properties+=NamedSchema '}' (ambiguity) '"enum"' ':' '[' enum+=PrimitiveValue
	 *     properties+=NamedSchema '}' (ambiguity) '"format"' ':' format=STRING
	 *     properties+=NamedSchema '}' (ambiguity) '"items"' ':' items=AbstractSchema
	 *     properties+=NamedSchema '}' (ambiguity) '"payload"' ':' payload=AbstractSchema
	 *     properties+=NamedSchema '}' (ambiguity) '"properties"' ':' '{' properties+=NamedSchema
	 *     properties+=NamedSchema '}' (ambiguity) '"required"' ':' '[' required+=STRING
	 *     properties+=NamedSchema '}' (ambiguity) '"title"' ':' title=STRING
	 *     properties+=NamedSchema '}' (ambiguity) '"type"' ':' type=STRING
	 *     properties+=NamedSchema '}' (ambiguity) '"x-friendly-name"' ':' friendlyName=STRING
	 *     properties+=NamedSchema '}' (ambiguity) '}' (rule end)
	 */
	protected void emit_Schema_CommaKeyword_2_6_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     enum+=PrimitiveValue ']' (ambiguity) '"default"' ':' default=PrimitiveValue
	 *     enum+=PrimitiveValue ']' (ambiguity) '"description"' ':' description=STRING
	 *     enum+=PrimitiveValue ']' (ambiguity) '"enum"' ':' '[' enum+=PrimitiveValue
	 *     enum+=PrimitiveValue ']' (ambiguity) '"format"' ':' format=STRING
	 *     enum+=PrimitiveValue ']' (ambiguity) '"items"' ':' items=AbstractSchema
	 *     enum+=PrimitiveValue ']' (ambiguity) '"payload"' ':' payload=AbstractSchema
	 *     enum+=PrimitiveValue ']' (ambiguity) '"properties"' ':' '{' properties+=NamedSchema
	 *     enum+=PrimitiveValue ']' (ambiguity) '"required"' ':' '[' required+=STRING
	 *     enum+=PrimitiveValue ']' (ambiguity) '"title"' ':' title=STRING
	 *     enum+=PrimitiveValue ']' (ambiguity) '"type"' ':' type=STRING
	 *     enum+=PrimitiveValue ']' (ambiguity) '"x-friendly-name"' ':' friendlyName=STRING
	 *     enum+=PrimitiveValue ']' (ambiguity) '}' (rule end)
	 */
	protected void emit_Schema_CommaKeyword_2_7_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     items=AbstractSchema (ambiguity) '"default"' ':' default=PrimitiveValue
	 *     items=AbstractSchema (ambiguity) '"description"' ':' description=STRING
	 *     items=AbstractSchema (ambiguity) '"enum"' ':' '[' enum+=PrimitiveValue
	 *     items=AbstractSchema (ambiguity) '"format"' ':' format=STRING
	 *     items=AbstractSchema (ambiguity) '"items"' ':' items=AbstractSchema
	 *     items=AbstractSchema (ambiguity) '"payload"' ':' payload=AbstractSchema
	 *     items=AbstractSchema (ambiguity) '"properties"' ':' '{' properties+=NamedSchema
	 *     items=AbstractSchema (ambiguity) '"required"' ':' '[' required+=STRING
	 *     items=AbstractSchema (ambiguity) '"title"' ':' title=STRING
	 *     items=AbstractSchema (ambiguity) '"type"' ':' type=STRING
	 *     items=AbstractSchema (ambiguity) '"x-friendly-name"' ':' friendlyName=STRING
	 *     items=AbstractSchema (ambiguity) '}' (rule end)
	 */
	protected void emit_Schema_CommaKeyword_2_8_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     required+=STRING ']' (ambiguity) '"default"' ':' default=PrimitiveValue
	 *     required+=STRING ']' (ambiguity) '"description"' ':' description=STRING
	 *     required+=STRING ']' (ambiguity) '"enum"' ':' '[' enum+=PrimitiveValue
	 *     required+=STRING ']' (ambiguity) '"format"' ':' format=STRING
	 *     required+=STRING ']' (ambiguity) '"items"' ':' items=AbstractSchema
	 *     required+=STRING ']' (ambiguity) '"payload"' ':' payload=AbstractSchema
	 *     required+=STRING ']' (ambiguity) '"properties"' ':' '{' properties+=NamedSchema
	 *     required+=STRING ']' (ambiguity) '"required"' ':' '[' required+=STRING
	 *     required+=STRING ']' (ambiguity) '"title"' ':' title=STRING
	 *     required+=STRING ']' (ambiguity) '"type"' ':' type=STRING
	 *     required+=STRING ']' (ambiguity) '"x-friendly-name"' ':' friendlyName=STRING
	 *     required+=STRING ']' (ambiguity) '}' (rule end)
	 */
	protected void emit_Schema_CommaKeyword_2_9_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     url=STRING (ambiguity) '"description"' ':' description=STRING
	 *     url=STRING (ambiguity) '"scheme"' ':' scheme=Scheme
	 *     url=STRING (ambiguity) '"url"' ':' url=STRING
	 *     url=STRING (ambiguity) '"variables"' ':' '{' variables+=Variable
	 *     url=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_Server_CommaKeyword_2_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     scheme=Scheme (ambiguity) '"description"' ':' description=STRING
	 *     scheme=Scheme (ambiguity) '"scheme"' ':' scheme=Scheme
	 *     scheme=Scheme (ambiguity) '"url"' ':' url=STRING
	 *     scheme=Scheme (ambiguity) '"variables"' ':' '{' variables+=Variable
	 *     scheme=Scheme (ambiguity) '}' (rule end)
	 */
	protected void emit_Server_CommaKeyword_2_1_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     variables+=Variable '}' (ambiguity) '"description"' ':' description=STRING
	 *     variables+=Variable '}' (ambiguity) '"scheme"' ':' scheme=Scheme
	 *     variables+=Variable '}' (ambiguity) '"url"' ':' url=STRING
	 *     variables+=Variable '}' (ambiguity) '"variables"' ':' '{' variables+=Variable
	 *     variables+=Variable '}' (ambiguity) '}' (rule end)
	 */
	protected void emit_Server_CommaKeyword_2_3_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=STRING (ambiguity) '"description"' ':' description=STRING
	 *     name=STRING (ambiguity) '"name"' ':' name=STRING
	 *     name=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_Tag_CommaKeyword_2_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     description=STRING (ambiguity) '"description"' ':' description=STRING
	 *     description=STRING (ambiguity) '"name"' ':' name=STRING
	 *     description=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_Tag_CommaKeyword_2_1_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     publish=AbstractMessage (ambiguity) '"publish"' ':' publish=AbstractMessage
	 *     publish=AbstractMessage (ambiguity) '"subscribe"' ':' subscribe=AbstractMessage
	 *     publish=AbstractMessage (ambiguity) '}' (rule end)
	 */
	protected void emit_Topic_CommaKeyword_4_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     subscribe=AbstractMessage (ambiguity) '"publish"' ':' publish=AbstractMessage
	 *     subscribe=AbstractMessage (ambiguity) '"subscribe"' ':' subscribe=AbstractMessage
	 *     subscribe=AbstractMessage (ambiguity) '}' (rule end)
	 */
	protected void emit_Topic_CommaKeyword_4_1_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     description=STRING (ambiguity) '"default"' ':' default=STRING
	 *     description=STRING (ambiguity) '"description"' ':' description=STRING
	 *     description=STRING (ambiguity) '"enum"' ':' '[' enum+=STRING
	 *     description=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_Variable_CommaKeyword_4_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     default=STRING (ambiguity) '"default"' ':' default=STRING
	 *     default=STRING (ambiguity) '"description"' ':' description=STRING
	 *     default=STRING (ambiguity) '"enum"' ':' '[' enum+=STRING
	 *     default=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_Variable_CommaKeyword_4_1_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     enum+=STRING ']' (ambiguity) '"default"' ':' default=STRING
	 *     enum+=STRING ']' (ambiguity) '"description"' ':' description=STRING
	 *     enum+=STRING ']' (ambiguity) '"enum"' ':' '[' enum+=STRING
	 *     enum+=STRING ']' (ambiguity) '}' (rule end)
	 */
	protected void emit_Variable_CommaKeyword_4_2_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
