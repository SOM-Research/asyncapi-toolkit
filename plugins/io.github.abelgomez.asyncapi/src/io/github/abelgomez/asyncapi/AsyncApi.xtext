grammar io.github.abelgomez.asyncapi.AsyncApi hidden(WS)

generate asyncApi "http://io.github.abelgomez/asyncapi/AsyncApi"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

AsyncAPI:
	{AsyncAPI} '{'	(
		  ( '"asyncapi"' ':' version=VersionNumber ','? )
		& ( '"info"' ':' info=Info ','? ) 
		& ( '"servers"' ':' '{' servers+=Server (',' servers+=Server)* '}' ','? )? 
		& ( '"channels"' ':' '{' channels+=Channel (',' channels+=Channel)* '}' ','? )?
		& ( '"components"' ':' components=Components ','? )?
		& ( '"x-sla"' ':' sla=Sla ','? )?
//		& ( GenericJsonTuple ','? )*
	) '}';
		
Info:
	{Info} '{' (
		  ( '"title"' ':' title=AnyString ','? ) 
		& ( '"version"' ':' version=AnyString ','? )
		& ( '"description"' ':' description=AnyString ','? )?
		& ( '"termsOfService"' ':' termsOfService=AnyString ','? )?
		& ( '"contact"' ':' contact=Contact ','? )?
		& ( '"license"' ':' license=License ','? )?
		& ( '"x-basePackage"' ':' basePackage=AnyString ','? )?
//		& ( GenericJsonTuple ','? )*
	) '}';

Contact:
	{Contact} '{' (
		  ( '"name"' ':' name=AnyString ','? )?
		& ( '"url"' ':' url=AnyString ','? )?
		& ( '"email"' ':' email=AnyString ','? )?
//		& ( GenericJsonTuple ','? )*
	) '}';

License:
	{License} '{' (
		  ( '"name"' ':' name=AnyString ','? )?
		& ( '"url"' ':' url=AnyString ','? )?
//		& ( GenericJsonTuple ','? )*
	) '}';

Server:
	{Server} name=AnyString ':' '{' (
		  ( '"url"' ':' url=AnyString ','? )
		& ( '"protocol"' ':' protocol=Protocol ','? )
		& ( '"description"' ':' description=AnyString ','? )?
		& ( '"variables"' ':' '{' variables+=Variable (',' variables+=Variable)* '}' ','? )?
		& ( '"x-isMonitored"' ':' isMonitored=Boolean ','?  )?
//		& ( GenericJsonTuple ','? )*
	) '}';
	
Variable:
	{Variable} name=AnyString ':' '{' (
		  ( '"description"' ':' description=AnyString ','?  )?
		& ( '"default"' ':' default=AnyString ','? )?
		& ( '"enum"' ':' '[' ^enum+=AnyString (',' ^enum+=AnyString)* ']' ','? )?
//		& ( GenericJsonTuple ','? )*
	) '}';

Channel:
	{Channel} name=AnyString ':' '{' (
		  ( '"description"' ':' description=AnyString ','?  )?
		& ( '"publish"' ':' publish=Operation ','?  )?
		& ( '"subscribe"' ':' subscribe=Operation ','? )?
		& ( '"parameters"' ':' '{' parameters+=NamedParameter (',' parameters+=NamedParameter)* '}' ','? )?
		& ( '"x-title"' ':' title=AnyString ','? )?
//		& ( GenericJsonTuple ','? )*
	) '}';
	
Operation:
	{Operation} '{' (
		  ( '"operationId"' ':' operationId=AnyString ','?  )?
		& ( '"summary"' ':' summary=AnyString ','?  )?
		& ( '"description"' ':' description=AnyString ','?  )?
		& ( '"message"' ':' message=AbstractMessage ','?  )?
		& ( '"traits"' ':' '[' traits+=AbstractOperationTrait ( ',' traits+=AbstractOperationTrait )* ']' ','?  )?
//		& ( GenericJsonTuple ','? )*
	) '}';

AbstractMessage:
	Reference | Message;

Message:
	{Message} '{' (
		  ( '"name"' ':' name=AnyString ','? )?
		& ( '"title"' ':' title=AnyString ','? )?
		& ( '"summary"' ':' summary=AnyString ','? )?
		& ( '"description"' ':' description=AnyString ','? )?
		& ( '"deprecated"' ':' deprecated=Boolean ','? )?
		& ( '"headers"' ':' headers=AbstractSchema ','? )?
		& ( '"tags"' ':' '[' tags+=Tag ( ',' tags+=Tag )* ']' ','? )?
		& ( '"payload"' ':' payload=AbstractSchema ','? )?
		& ( '"traits"' ':' '[' traits+=AbstractMessageTrait ( ',' traits+=AbstractMessageTrait )* ']' ','?  )?
		& ( '"x-identifier"' ':' identifier=MessageIdentifier )?
//		& ( GenericJsonTupleButRef ','? )*
	) '}';

NamedMessage:
	{NamedMessage} name=AnyString ':' message=AbstractMessage;

Tag:
	{Tag} '{' (
		('"name"' ':' name=AnyString ','?)?
		& ('"description"' ':' description=AnyString ','?)?
//		& ( GenericJsonTuple ','? )*
	) '}';

AbstractSchema:
	Reference | Schema;

Schema:
	{Schema} '{' (
		  ( '"title"' ':' title=AnyString ','? )?
		& ( '"type"' ':' type=JsonType ','? )?
		& ( '"description"' ':' description=AnyString ','? )?
		& ( '"format"' ':' format=AnyString ','? )?
		& ( '"minimum"' ':' minimum=INT ','? )?
		& ( '"maximum"' ':' maximum=INT ','? )?
		& ( '"minItems"' ':' minItems=INT ','? )?
		& ( '"maxItems"' ':' maxItems=INT ','? )?
		& ( '"default"' ':' default=PrimitiveValue','? )?
		& ( '"properties"' ':' '{' properties+=NamedSchema (',' properties+=NamedSchema)* '}' ','? )?
		& ( '"enum"' ':' '[' ^enum+=PrimitiveValue (',' ^enum+=PrimitiveValue)* ']' ','? )?
		& ( '"items"' ':' items=AbstractSchema ','? )?
		& ( '"required"' ':' '[' required+=AnyString (',' required+=AnyString)* ']' ','? )?
//		& ( GenericJsonTupleButRef ','? )*
	) '}';

NamedSchema:
	{NamedSchema} name=AnyString ':' schema=AbstractSchema;

AbstractParameter:
	Reference | Parameter;

Parameter:
	{Parameter} '{' (
		( '"description"' ':' description=AnyString ','? )?
		& ( '"schema"' ':' schema=AbstractSchema ','? )?
		& ( '"location"' ':' location=AnyString ','? )?
//		& ( GenericJsonTupleButRef ','? )*
	) '}';


NamedParameter:
	{NamedParameter} name=AnyString ':' parameter=AbstractParameter;
	
AbstractOperationTrait:
	Reference | OperationTrait;
	
OperationTrait:
	{OperationTrait} '{' (
		  ( '"operationId"' ':' operationId=AnyString ','?  )?
		& ( '"summary"' ':' summary=AnyString ','?  )?
		& ( '"description"' ':' description=AnyString ','?  )?
//		& ( GenericJsonTupleButRef ','? )*
	) '}';

NamedOperationTrait:
	{NamedOperationTrait} name=AnyString ':' operationTrait=AbstractOperationTrait;

AbstractMessageTrait:
	Reference | MessageTrait;
	
MessageTrait:
	{MessageTrait} '{' (
		  ( '"summary"' ':' summary=AnyString ','? )?
		& ( '"description"' ':' description=AnyString ','? )?
		& ( '"deprecated"' ':' deprecated=Boolean ','? )?
		& ( '"headers"' ':' headers=AbstractSchema ','? )?
		& ( '"tags"' ':' '[' tags+=Tag ( ',' tags+=Tag )* ']' ','? )?
//		& ( GenericJsonTupleButRef ','? )*
	) '}';

NamedMessageTrait:
	{NamedMessageTrait} name=AnyString ':' messageTrait=AbstractMessageTrait;


Components:
	{Components} '{' (
		  ( '"schemas"' ':' '{' schemas+=NamedSchema (',' schemas+=NamedSchema)* '}' ','? )?
		& ( '"messages"' ':' '{' messages+=NamedMessage (',' messages+=NamedMessage)* '}' ','? )?
		& ( '"parameters"' ':' '{' parameters+=NamedParameter (',' parameters+=NamedParameter)* '}' ','? )?
		& ( '"operationTraits"' ':' '{' operationTraits+=NamedOperationTrait (',' operationTraits+=NamedOperationTrait)* '}' ','? )?
		& ( '"messageTraits"' ':' '{' messageTraits+=NamedMessageTrait (',' messageTraits+=NamedMessageTrait)* '}' ','? )?
		& ( '"x-qosMetrics"' ':' '[' qosMetrics+=QoSMetric (',' qosMetrics+=QoSMetric)* ']' ','? )?
//		& ( GenericJsonTupleButRef ','? )*
	) '}';


Sla:
	{Sla} '{' (
		  ( '"guaranteeTerm"' ':' guaranteeTerm+=GuaranteeTerm (',' guaranteeTerm+=GuaranteeTerm)* )
	) '}';
	
GuaranteeTerm:
	{GuaranteeTerm} '{' (
		  ( '"scopes"' ':' '{' scopes+=Scope (',' scopes+=Scope)* '}' ',' )
		  ( '"qualifyingConditions"' ':' '{' qualifyingConditions+=QualifyingCondition (',' qualifyingConditions+=QualifyingCondition)* '}'',')?
		  ( '"slos"' ':' '{' slos+=Slo (',' slos+=Slo)* '}')	  
	) '}';

Scope:
	{Scope}(
	   name=AnyString ':' reference= [Channel|AnyString]  
	);
 
QualifyingCondition:
	{QualifyingCondition} name=AnyString ':' condition=BooleanExpression  
;
	
Slo:
	{Slo} name=AnyString ':' condition=BooleanExpression 
;		
	
AbstractQoSMetric:
  QoSMetricReference | QoSMetric;

QoSMetricReference:
  metric= [QoSMetric|AnyString]	
;
	
QoSMetric:
	('{' 
		(
		  ( '"name"' ':' name=AnyString ','? )						
		& ( '"metricType"' ':' metricType=QoSMetricType ','? )			
		& ( '"description"' ':' description=AnyString ','? )?
		& ( '"unit"' ':' unit=QoSMetricUnit ','? )
		& ( '"groupedByEvent"' ':' groupedByEvent=Boolean ','? )		
		) (DerivedQoSMetric)?	// Això està al final de tot, pq Xtext es queixa que no pot haver-hi una unasssigned rule dins d'una unordered list.		
	'}');

 DerivedQoSMetric:
	{DerivedQoSMetric}(
		'"derivedQoSMetricDefinition"' ':' '{' (
		  ('"window"' ':'  window = AnyString ','? )
		& ('"windowUnit"' ':'  windowUnit = WindowUnit ','? )
		& ('"aggregationFunction"' ':'  aggregationFunction = AggregationFunction ','? )
	) '}' )
;

BooleanExpression:
	AndExpression | OrExpression | ComparisonExpression;

AndExpression:
  {AndExpression} '{' '"AND"' ':'  '['  conditions+=BooleanExpression (',' conditions+=BooleanExpression)* ']' '}' ;
  	
OrExpression:
  {OrExpression} '{' '"OR"' ':' '['  conditions+=BooleanExpression (',' conditions+=BooleanExpression)* ']' '}';

ComparisonExpression:
	{ComparisonExpression}
		'{'
	    '"qosMetric"' ':'  qosMetric = AbstractQoSMetric   ','
	    '"operator"' ':' operator = Operator ','
	    '"value"' ':' value = AnyString   
	   	'}'
;

Reference:
	{Reference} '{' '"$ref"' ':' uri=AnyString '}';

//GenericJsonExpression:
//	PrimitiveValue
//	| GenericJsonObject
//	| GenericJsonArray;
//
//GenericJsonObject:
//	'{' '}' | '{' GenericJsonTuple (',' GenericJsonTuple)* '}';
//
//GenericJsonArray:
//	'[' ']' | '[' GenericJsonExpression (',' GenericJsonExpression)* ']';
//
//GenericJsonTuple: AnyString ':' GenericJsonExpression;
//
//GenericJsonTupleButRef: AnyStringButRef ':' GenericJsonExpression;


enum WindowUnit:
	seconds = '"seconds"'
	| minutes = '"minutes"'
	| hours = '"hours"'
	| days = '"days"'
	| messages = '"messages"'
;

enum AggregationFunction:
	AVG = '"AVG"'
	| MEDIAN = '"MEDIAN"'
	| MAX = '"MAX"'
    | MIN = '"MIN"'
;

enum QoSMetricType:
	availability = '"availability"'
	| bandwith = '"bandwith"'
	| cpu = '"cpu"'
	| capacity = '"capacity"'
	| disaster = '"disaster"' | resiliance = '"resiliance"'
	| discoverability = '"discoverability"'
	| documentation = '"documentation"'
	| exception_handling = '"exception_handling"'
	| expected_failures = '"expected_failures"'
	| failover = '"failover"'
	| jitter = '"jitter"'
	| latency = '"latency"'
	| load_balancing = '"load_balancing"'
	| maximum_throughput = '"maximum_throughput"'
	| memory_aapacity = '"memory_aapacity"'
	| packet_loss = '"packet_loss"'
	| precision = '"precision"'
	| probability_of_correctness = '"probability_of_correctness"'
	| round_trip_time = '"round_trip_time"'
	| throughput = '"throughput"'
	| time_to_tail = '"time_to_tail"'
	| time_to_tepair = '"time_to_tepair"'
	| type_consistency = '"type_consistency"'
	| uptime = '"uptime"'
	| up_to_dateness = '"up-to-dateness"'
;

enum QoSMetricUnit:
	milliseconds = '"milliseconds"'
	| seconds = '"seconds"'
	| minutes = '"minutes"'
	| hours = '"hours"'
	| null = '"null"'
;

enum Operator: 
	greater = '">"'
	| greater_equal = '">="'
	| equal = '"="'
	| less_equal = '"<="'
	| less = '"<"'	
;
	

enum JsonType:
	string = '"string"'
	| number = '"number"'
	| integer = '"integer"'
	| boolean = '"boolean"'
	| object = '"object"'
	| array = '"array"'
	| any = '"any"'
	| null = '"null"';
	
enum Boolean:
	_false = "false"
	| _true = "true";

enum VersionNumber:
	_200 = '"2.0.0"';
	
enum MessageIdentifier:
	none ='"none"'
	| generated = '"generated"'
	| md5 = '"md5"'
	| sha256 = '"sha-256"';
	
enum Protocol:
	amqp = '"amqp"'
	| amqps = '"amqps"'
	| http = '"http"'
	| https = '"https"'
	| jms = '"jms"'
	| kafka = '"kafka"'
	| kafka_secure = '"kafka-secure"'
	| mqtt = '"mqtt"'
	| secure_mqtt = '"secure-mqtt"'
	| ws = '"ws"'
	| wss = '"wss"'
	| stomp = '"stomp"'
	| stomps = '"stomps"';

PrimitiveValue:
	AnyString
	| "true" 
	| "false"
	| INT;

AnyStringButRef:
	STRING
	| Keyword;

AnyString:
	STRING
	| '"$ref"'
	| Keyword;

terminal ID:
	'^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	
terminal INT returns ecore::EInt:
	('0'..'9')+;
	
terminal STRING:
	'"' ( '\\' . | !('\\'|'"') )* '"' 
	| "'" ( '\\' . | !('\\'|"'") )* "'";

terminal WS:
	(' '|'\t'|'\r'|'\n')+;

Keyword:
        '"2.0.0"'
        | '"<"'
        | '"<="'
        | '"="'
        | '">"'
        | '">="'
        | '"AND"'
        | '"AVG"'
        | '"MAX"'
        | '"MEDIAN"'
        | '"MIN"'
        | '"OR"'
        | '"aggregationFunction"'
        | '"amqp"'
        | '"amqps"'
        | '"any"'
        | '"array"'
        | '"asyncapi"'
        | '"availability"'
        | '"bandwith"'
        | '"boolean"'
        | '"capacity"'
        | '"channels"'
        | '"components"'
        | '"contact"'
        | '"cpu"'
        | '"dataType"'
        | '"days"'
        | '"default"'
        | '"deprecated"'
        | '"derivedQoSMetricDefinition"'
        | '"description"'
        | '"disaster"'
        | '"discoverability"'
        | '"documentation"'
        | '"email"'
        | '"enum"'
        | '"exception_handling"'
        | '"expected_failures"'
        | '"failover"'
        | '"format"'
        | '"groupedByEvent"'
        | '"guaranteeTerm"'
        | '"headers"'
        | '"hours"'
        | '"http"'
        | '"https"'
        | '"info"'
        | '"integer"'
        | '"items"'
        | '"jitter"'
        | '"jms"'
        | '"kafka"'
        | '"kafka-secure"'
        | '"latency"'
        | '"license"'
        | '"load_balancing"'
        | '"location"'
        | '"maxItems"'
        | '"maximum"'
        | '"maximum_throughput"'
        | '"memory_aapacity"'
        | '"message"'
        | '"messageTraits"'
        | '"messages"'
        | '"metricType"'
        | '"milliseconds"'
        | '"minItems"'
        | '"minimum"'
        | '"minutes"'
        | '"mqtt"'
        | '"mqtts"'
        | '"name"'
        | '"null"'
        | '"number"'
        | '"object"'
        | '"operationId"'
        | '"operationTraits"'
        | '"operator"'
        | '"packet_loss"'
        | '"parameters"'
        | '"payload"'
        | '"precision"'
        | '"probability_of_correctness"'
        | '"properties"'
        | '"protocol"'
        | '"publish"'
        | '"qosMetric"'
        | '"qualifyingConditions"'
        | '"required"'
        | '"resiliance"'
        | '"round_trip_time"'
        | '"schema"'
        | '"schemas"'
        | '"scopes"'
        | '"seconds"'
        | '"secure-mqtt"'
        | '"servers"'
        | '"slos"'
        | '"stomp"'
        | '"stomps"'
        | '"string"'
        | '"subscribe"'
        | '"summary"'
        | '"tags"'
        | '"termsOfService"'
        | '"throughput"'
        | '"time_to_tail"'
        | '"time_to_tepair"'
        | '"title"'
        | '"traits"'
        | '"type"'
        | '"type_consistency"'
        | '"unit"'
        | '"up-to-dateness"'
        | '"uptime"'
        | '"url"'
        | '"value"'
        | '"variables"'
        | '"version"'
        | '"window"'
        | '"windowUnit"'
        | '"ws"'
        | '"wss"'
        | '"x-basePackage"'
        | '"x-qosMetrics"'
        | '"x-sla"'
        | '"x-title"';
