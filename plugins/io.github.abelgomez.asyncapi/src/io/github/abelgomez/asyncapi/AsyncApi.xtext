grammar io.github.abelgomez.asyncapi.AsyncApi hidden(WS)

generate asyncApi "http://io.github.abelgomez/asyncapi/AsyncApi"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

AsyncAPI:
	{AsyncAPI} '{'	(
		  ( '"asyncapi"' ':' version=VersionNumber ','? )
		& ( '"info"' ':' info=Info ','? ) 
		& ( '"servers"' ':' '{' servers+=Server (',' servers+=Server)* '}' ','? )? 
		& ( '"channels"' ':' '{' channels+=Channel (',' channels+=Channel)* '}' ','? )?
		& ( '"components"' ':' components=Components ','? )?
//		& ( GenericJsonTuple ','? )*
		& ( '"sla"' ':' sla=Sla ','? )?
	) '}';
		
Info:
	{Info} '{' (
		  ( '"title"' ':' title=AnyString ','? ) 
		& ( '"version"' ':' version=AnyString ','? )
		& ( '"description"' ':' description=AnyString ','? )?
		& ( '"termsOfService"' ':' termsOfService=AnyString ','? )?
		& ( '"contact"' ':' contact=Contact ','? )?
		& ( '"license"' ':' license=License ','? )?
//		& ( GenericJsonTuple ','? )*
	) '}';

Contact:
	{Contact} '{' (
		  ( '"name"' ':' name=AnyString ','? )?
		& ( '"url"' ':' url=AnyString ','? )?
		& ( '"email"' ':' email=AnyString ','? )?
//		& ( GenericJsonTuple ','? )*
	) '}';

License:
	{License} '{' (
		  ( '"name"' ':' name=AnyString ','? )?
		& ( '"url"' ':' url=AnyString ','? )?
//		& ( GenericJsonTuple ','? )*
	) '}';

Server:
	{Server} name=AnyString ':' '{' (
		  ( '"url"' ':' url=AnyString ','? )
		& ( '"protocol"' ':' protocol=Protocol ','? )
		& ( '"description"' ':' description=AnyString ',' )?
		& ( '"variables"' ':' '{' variables+=Variable (',' variables+=Variable)* '}' ','? )?
//		& ( GenericJsonTuple ','? )*
	) '}';

Variable:
	{Variable} name=AnyString ':' '{' (
		  ( '"description"' ':' description=AnyString ','?  )?
		& ( '"default"' ':' default=AnyString ','? )?
		& ( '"enum"' ':' '[' ^enum+=AnyString (',' ^enum+=AnyString)* ']' ','? )?
//		& ( GenericJsonTuple ','? )*
	) '}';

Channel:
	{Channel} name=AnyString ':' '{' (
		  ( '"description"' ':' description=AnyString ','?  )?
		& ( '"publish"' ':' publish=Operation ','?  )?
		& ( '"subscribe"' ':' subscribe=Operation ','? )?
		& ( '"parameters"' ':' '{' parameters+=NamedParameter (',' parameters+=NamedParameter)* '}' ','? )?
		& ( '"x-title"' ':' title=AnyString ','? )?
//		& ( GenericJsonTuple ','? )*
	) '}';
	
Operation:
	{Operation} '{' (
		  ( '"operationId"' ':' operationId=AnyString ','?  )?
		& ( '"summary"' ':' summary=AnyString ','?  )?
		& ( '"description"' ':' description=AnyString ','?  )?
		& ( '"message"' ':' message=AbstractMessage ','?  )?
		& ( '"traits"' ':' '[' traits+=AbstractOperationTrait ( ',' traits+=AbstractOperationTrait )* ']' ','?  )?
//		& ( GenericJsonTuple ','? )*
	) '}';

AbstractMessage:
	Reference | Message;

Message:
	{Message} '{' (
		  ( '"name"' ':' name=AnyString ','? )?
		& ( '"title"' ':' title=AnyString ','? )?
		& ( '"summary"' ':' summary=AnyString ','? )?
		& ( '"description"' ':' description=AnyString ','? )?
		& ( '"deprecated"' ':' deprecated=Boolean ','? )?
		& ( '"headers"' ':' headers=AbstractSchema ','? )?
		& ( '"tags"' ':' '[' tags+=Tag ( ',' tags+=Tag )* ']' ','? )?
		& ( '"payload"' ':' payload=AbstractSchema ','? )?
		& ( '"traits"' ':' '[' traits+=AbstractMessageTrait ( ',' traits+=AbstractMessageTrait )* ']' ','?  )?
//		& ( GenericJsonTupleButRef ','? )*
	) '}';

NamedMessage:
	{NamedMessage} name=AnyString ':' message=AbstractMessage;

Tag:
	{Tag} '{' (
		('"name"' ':' name=AnyString ','?)?
		& ('"description"' ':' description=AnyString ','?)?
//		& ( GenericJsonTuple ','? )*
	) '}';

AbstractSchema:
	Reference | Schema;

Schema:
	{Schema} '{' (
		  ( '"title"' ':' title=AnyString ','? )?
		& ( '"type"' ':' type=JsonType ','? )?
		& ( '"description"' ':' description=AnyString ','? )?
		& ( '"format"' ':' format=AnyString ','? )?
		& ( '"minimum"' ':' minimum=INT ','? )?
		& ( '"maximum"' ':' maximum=INT ','? )?
		& ( '"minItems"' ':' minItems=INT ','? )?
		& ( '"maxItems"' ':' maxItems=INT ','? )?
		& ( '"default"' ':' default=PrimitiveValue','? )?
		& ( '"properties"' ':' '{' properties+=NamedSchema (',' properties+=NamedSchema)* '}' ','? )?
		& ( '"enum"' ':' '[' ^enum+=PrimitiveValue (',' ^enum+=PrimitiveValue)* ']' ','? )?
		& ( '"items"' ':' items=AbstractSchema ','? )?
		& ( '"required"' ':' '[' required+=AnyString (',' required+=AnyString)* ']' ','? )?
//		& ( GenericJsonTupleButRef ','? )*
	) '}';

NamedSchema:
	{NamedSchema} name=AnyString ':' schema=AbstractSchema;

AbstractParameter:
	Reference | Parameter;

Parameter:
	{Parameter} '{' (
		( '"description"' ':' description=AnyString ','? )?
		& ( '"schema"' ':' schema=AbstractSchema ','? )?
		& ( '"location"' ':' location=AnyString ','? )?
//		& ( GenericJsonTupleButRef ','? )*
	) '}';


NamedParameter:
	{NamedParameter} name=AnyString ':' parameter=AbstractParameter;
	
AbstractOperationTrait:
	Reference | OperationTrait;
	
OperationTrait:
	{OperationTrait} '{' (
		  ( '"operationId"' ':' operationId=AnyString ','?  )?
		& ( '"summary"' ':' summary=AnyString ','?  )?
		& ( '"description"' ':' description=AnyString ','?  )?
//		& ( GenericJsonTupleButRef ','? )*
	) '}';

NamedOperationTrait:
	{NamedOperationTrait} name=AnyString ':' operationTrait=AbstractOperationTrait;

AbstractMessageTrait:
	Reference | MessageTrait;
	
MessageTrait:
	{MessageTrait} '{' (
		  ( '"summary"' ':' summary=AnyString ','? )?
		& ( '"description"' ':' description=AnyString ','? )?
		& ( '"deprecated"' ':' deprecated=Boolean ','? )?
		& ( '"headers"' ':' headers=AbstractSchema ','? )?
		& ( '"tags"' ':' '[' tags+=Tag ( ',' tags+=Tag )* ']' ','? )?
//		& ( GenericJsonTupleButRef ','? )*
	) '}';

NamedMessageTrait:
	{NamedMessageTrait} name=AnyString ':' messageTrait=AbstractMessageTrait;


Components:
	{Components} '{' (
		  ( '"schemas"' ':' '{' schemas+=NamedSchema (',' schemas+=NamedSchema)* '}' ','? )?
		& ( '"messages"' ':' '{' messages+=NamedMessage (',' messages+=NamedMessage)* '}' ','? )?
		& ( '"parameters"' ':' '{' parameters+=NamedParameter (',' parameters+=NamedParameter)* '}' ','? )?
		& ( '"operationTraits"' ':' '{' operationTraits+=NamedOperationTrait (',' operationTraits+=NamedOperationTrait)* '}' ','? )?
		& ( '"messageTraits"' ':' '{' messageTraits+=NamedMessageTrait (',' messageTraits+=NamedMessageTrait)* '}' ','? )?
		& ( '"qosMetrics"' ':' '{' qosMetrics+=NamedQoSMetric (',' qosMetrics+=NamedQoSMetric)* '}' ','? )?
		
//		& ( GenericJsonTupleButRef ','? )*
	) '}';


Sla:
	{Sla} '{' (
		  ( '"guaranteeTerm"' ':' guaranteeTerm+=GuaranteeTerm (',' guaranteeTerm+=GuaranteeTerm)* )
	) '}';
	
GuaranteeTerm:
	{GuaranteeTerm} '{' (
		  ( '"scopes"' ':' '{' scopes+=Scope (',' scope+=Scope)* '}' ',' )
		  ( '"qualifyingConditions"' ':' '{' qualifyingConditions+=QualifyingCondition (',' qualifyingCondition+=QualifyingCondition)* '}'',')?
		  ( '"slos"' ':' '{' slos+=Slo (',' slo+=Slo)* '}')	  
	) '}';

Scope:
	{Scope}(
	   name=AnyString ':' '{' '"$ref"' ':' ( reference= [Channel|AnyString] |  reference= [Operation])'}' 
	);
 
QualifyingCondition:
	{QualifyingCondition} name=AnyString ':' condition=BooleanCondition  
;
	
Slo:
	{Slo} name=AnyString ':' condition=BooleanCondition 
;		
	
AbstractQoSMetric:
	Reference | QoSMetric;
	
QoSMetric:
	('{' 
		(AtomicQoSMetric | DerivedQoSMetric) ','
		(
		  ( '"description"' ':' description=AnyString ','? )?
		& ( '"unit"' ':' unit=QoSMetricUnit ','? )
		& ( '"dataType"' ':' dataType=QoSMetricType ','? )			
		)
	'}');

 DerivedQoSMetric:
	{DerivedQoSMetric}(
	      ('"metricType"' ':'  '"derived"' ',' )	
		& ('"window"' ':'  window = AnyString ','? )
		& ('"windowUnit"' ':'  windowUnit = WindowUnit ','? )
		& ('"aggregationFunction"' ':'  aggregationFunction = AnyString ','? )
		& ('"atomicMetric"' ':'  atomicMetric = AbstractQoSMetric  ','? )
	)
;

AtomicQoSMetric:	
	{AtomicQoSMetric} ('"metricType"' ':' '"atomic"' )   
; 

NamedQoSMetric:
	{NamedQoSMetric} name=AnyString ':' qosMetric=AbstractQoSMetric;

BooleanCondition:
	ANDCondition | ORCondition | AtomicBooleanCondition;

ANDCondition:
  {ANDCondition} '{' '"AND"' ':'  '['  conditions+=BooleanCondition (',' conditions+=BooleanCondition)* ']' '}' ;
  	
ORCondition:
  {ANDCondition} '{' '"OR"' ':' '['  conditions+=BooleanCondition (',' conditions+=BooleanCondition)* ']' '}';

AtomicBooleanCondition:
	{AtomicBooleanCondition}
		'{'
	    '"qosMetric"' ':'  qosMetric = AbstractQoSMetric   ','
	    '"operator"' ':' operator = Operator ','
	    '"value"' ':' value = AnyString   
	   	'}'
;

Reference:
	{Reference} '{' '"$ref"' ':' uri=AnyString '}';

//GenericJsonExpression:
//	PrimitiveValue
//	| GenericJsonObject
//	| GenericJsonArray;
//
//GenericJsonObject:
//	'{' '}' | '{' GenericJsonTuple (',' GenericJsonTuple)* '}';
//
//GenericJsonArray:
//	'[' ']' | '[' GenericJsonExpression (',' GenericJsonExpression)* ']';
//
//GenericJsonTuple: AnyString ':' GenericJsonExpression;
//
//GenericJsonTupleButRef: AnyStringButRef ':' GenericJsonExpression;


enum WindowUnit:
	seconds = '"seconds"'
	| minutes = '"minutes"'
	| hours = '"hours"'
	| days = '"days"'
	| messages = '"messages"'
;

enum QoSMetricUnit:
	milliseconds = '"milliseconds"'
	| seconds = '"seconds"'
	| minutes = '"minutes"'
	| hours = '"hours"'
	| null = '"null"'
;


enum QoSMetricType:
	real = '"real"'
	| integer = '"integer"'
	| boolean = '"boolean"'
;

enum Operator: 
	greater = '">"'
	| greater_equal = '">="'
	| equal = '"="'
	| less_equal = '"<="'
	| less = '"<"'	
;
	

enum JsonType:
	string = '"string"'
	| number = '"number"'
	| integer = '"integer"'
	| boolean = '"boolean"'
	| object = '"object"'
	| array = '"array"'
	| any = '"any"'
	| null = '"null"';
	
enum Boolean:
	_false = "false"
	| _true = "true";

enum VersionNumber:
	_200 = '"2.0.0"';
	
enum Protocol:
	amqp = '"amqp"'
	| amqps = '"amqps"'
	| mqtt = '"mqtt"'
	| mqtts = '"mqtts"'
	| ws = '"ws"'
	| wss = '"wss"'
	| stomp = '"stomp"'
	| stomps = '"stomps"';

PrimitiveValue:
	AnyString
	| "true" 
	| "false"
	| INT;

AnyStringButRef:
	STRING
	| Keyword;

AnyString:
	STRING
	| '"$ref"'
	| Keyword;

terminal ID:
	'^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	
terminal INT returns ecore::EInt:
	('0'..'9')+;
	
terminal STRING:
	'"' ( '\\' . | !('\\'|'"') )* '"' 
	| "'" ( '\\' . | !('\\'|"'") )* "'";

terminal WS:
	(' '|'\t'|'\r'|'\n')+;

Keyword:
	'"2.0.0"'
	| '"amqp"'
	| '"amqps"'
	| '"any"'
	| '"array"'
	| '"asyncapi"'
	| '"boolean"'
	| '"channels"'
	| '"components"'
	| '"contact"'
	| '"default"'
	| '"deprecated"'
	| '"description"'
	| '"email"'
	| '"enum"'
	| '"format"'
	| '"headers"'
	| '"info"'
	| '"integer"'
	| '"items"'
	| '"license"'
	| '"location"'
	| '"maximum"'
	| '"message"'
	| '"messageTraits"'
	| '"messages"'
	| '"minimum"'
	| '"mqtt"'
	| '"mqtts"'
	| '"name"'
	| '"null"'
	| '"number"'
	| '"object"'
	| '"operationId"'
	| '"operationTraits"'
	| '"parameters"'
	| '"payload"'
	| '"properties"'
	| '"protocol"'
	| '"publish"'
	| '"required"'
	| '"schema"'
	| '"schemas"'
	| '"servers"'
	| '"stomp"'
	| '"stomps"'
	| '"string"'
	| '"subscribe"'
	| '"summary"'
	| '"tags"'
	| '"termsOfService"'
	| '"title"'
	| '"traits"'
	| '"type"'
	| '"url"'
	| '"variables"'
	| '"version"'
	| '"ws"'
	| '"wss"'
	| '"x-title"';